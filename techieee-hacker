'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

// Complete the sockMerchant function below.
function sockMerchant(n, ar) {

var newar = [];
var ncount = n;

// fullfilling constraints
if(ncount === 100) {
   for(var i = 0; i <= 100; i++) {
   var arVel = ar[i];
   newar.push(arVel);
}
}
else {
    for(var i = 0; i <= ncount; i++) {
    var arVel = ar[i];
    newar.push(arVel);
}
}

//counting pair count
var myObj = [];
var res = 0;

for(var i = 0; i <= newar.length -1; i++) {
var arVel = newar[i];

if(myObj.indexOf(arVel) > -1)
{
  res = res+1;
  var index = myObj.indexOf(arVel);
  myObj.splice(index, 1);
}
else
{
  myObj.push(arVel);
}
}

return res;
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const n = parseInt(readLine(), 10);

    const ar = readLine().split(' ').map(arTemp => parseInt(arTemp, 10));

    let result = sockMerchant(n, ar);

    ws.write(result + "\n");

    ws.end();
}
